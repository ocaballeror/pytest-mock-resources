[tool.poetry]
name = "pytest-mock-resources"
version = "2.1.0"
description = "A pytest plugin for easily instantiating reproducible mock resources."
authors = [
    "Omar Khan <oakhan3@gmail.com>",
    "Dan Cardin <ddcardin@gmail.com>",
    "Gabriel Michael <gabriel.j.michael@gmail.com>",
    "Prateek Pisat <pisatprateek12@gmail.com>",
]
license = "MIT"
keywords = [ "pytest", "sqlalchemy", "docker", "fixture", "mock" ]
classifiers = [ "Framework :: Pytest" ]
repository = "https://github.com/schireson/pytest-mock-resources"
packages = [
    { include = "pytest_mock_resources", from = "src" },
]
readme = 'README.md'
include = [
    "*.md",
]

[tool.poetry.dependencies]
python = ">=3.6, <4"

docker = {version = ">= 2.5.1"}
pytest = {version = ">=1.0"}
responses = "*"
sqlalchemy = "*"

# extra [postgres]
psycopg2 = {version = "*", optional = true}
psycopg2-binary = {version = "*", optional = true}
asyncpg = {version = "*", optional = true}

# extra [redshift]
moto = {version = "*", optional = true}
boto3 = {version = "*", optional = true}
sqlparse = {version = "*", optional = true}

# extra [mongo]
pymongo = {version = "*", optional = true}

# extra [redis]
redis = {version = "*", optional = true}

# extra [mysql]
pymysql = {version = ">=1.0", optional = true}

[tool.poetry.dev-dependencies]
black = {version = "=>19.3b0", allow-prereleases = true}
coverage = {version = ">=5.5", extras = ["toml"]}
flake8 = "^3.7.9"
isort = ">=5"
mypy = "^0.910"
pydocstyle = "^6.1.1"
sqlalchemy-stubs = {version = "*", python = ">=3.5"}
pytest-xdist = "*"
pytest-asyncio = "^0.15.1"
types-redis = "^3.5.4"
types-PyMySQL = "^1.0.0"

[tool.poetry.extras]
postgres = ['psycopg2']
postgres-binary = ['psycopg2-binary']
postgres-async = ['asyncpg']
redshift = ['boto3', 'moto', 'sqlparse']
mongo = ['pymongo']
redis = ['redis']
mysql = ['pymysql']

[tool.poetry.plugins.pytest11]
pytest_mock_resources = "pytest_mock_resources"

[tool.poetry.scripts]
pmr = "pytest_mock_resources.cli:main"

[tool.isort]
profile = 'black'
known_first_party = 'pytest_mock_resources,tests'
line_length = 100
float_to_top = true
order_by_type = false
use_parentheses = true

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.black]
line_length = 100

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
